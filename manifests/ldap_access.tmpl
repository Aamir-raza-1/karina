auth_request_set $authHeader0 $upstream_http_x_auth_request_user;
proxy_set_header 'x-auth-request-user' $authHeader0;
auth_request_set $authHeader1 $upstream_http_x_auth_request_email;
proxy_set_header 'x-auth-request-email' $authHeader1;
auth_request_set $authHeader2 $upstream_http_authorization;
proxy_set_header 'authorization' $authHeader2;

set $authorizedGroups '{{ .groups }}';

access_by_lua_block {
  local authorization = ngx.var.authHeader2
  local jwt = require "resty.jwt"
  local validators = require "resty.jwt-validators"
  local inspect = require "inspect"
  local cjson = require("cjson")

  if authorization == nil or authorization == '' then
    ngx.log(ngx.ERR, "empty http authorization")
  elseif ngx.var.authorizedGroups == nil or ngx.var.authorizedGroups == '' then
    ngx.log(ngx.ERR, "no authorized groups")
  else
    if authorization:find("Bearer ") ~= 1 then
      ngx.status = ngx.HTTP_BAD_REQUEST
      ngx.say("invalid authorization, not Bearer")
      ngx.exit(ngx.HTTP_OK)
    end

    local _, _, token = string.find(authorization, "Bearer%s+(.+)")

    local jwt_obj = jwt:load_jwt(token)
    if not jwt_obj.valid then
      ngx.status = ngx.HTTP_BAD_REQUEST
      ngx.say("invalid jwt")
      ngx.exit(ngx.HTTP_OK)
    end

    local groups = jwt_obj.payload.groups

    if groups == nil then
      ngx.status = ngx.HTTP_BAD_REQUEST
      ngx.say("groups claim not present in access token")
      ngx.exit(ngx.HTTP_OK)
    end

    local authorized_groups_list = cjson.decode(ngx.var.authorizedGroups)
    local authorized_groups_set = {}
    for i, group in ipairs(authorized_groups_list) do
      authorized_groups_set[group] = true
    end

    local found = false
    -- Parse the groups and check if they match any of our authorized groups
    for i, group in ipairs(groups) do
      if authorized_groups_set[group] == true then
        -- If we found an authorized group, say so and break the loop
        found = true
        break
      end
    end
    -- If we didn't find out group in our list, then return forbidden
    if not found then
        -- If not, throw a forbidden
        ngx.status = ngx.HTTP_FORBIDDEN
        ngx.say("No required LDAP group found")
        ngx.exit(ngx.HTTP_FORBIDDEN)
    end
  end
}