apiVersion: v1
kind: Namespace
metadata:
  name: minio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: minio
  namespace: minio
spec:
  selector:
    matchLabels:
      app: minio # has to match .spec.template.metadata.labels
  strategy:
    # Specifies the strategy used to replace old Pods by new ones
    # Refer: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    type: Recreate
  template:
    metadata:
      labels:
        # This label is used as a selector in Service definition
        app: minio
    spec:
      # Volumes used by this deployment
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: minio
          # Volume mounts for this container
          volumeMounts:
            # Volume 'data' is mounted to path '/data'
            - name: data
              mountPath: "/data"
          # Pulls the lastest Minio image from Docker Hub
          image: minio/minio:RELEASE.2019-10-12T01-39-57Z
          resources:
            requests:
              cpu: "10m"
              memory: "10Mi"
            limits:
              cpu: "500m"
              memory: "50Mi"
          args:
            - server
            - /data
          env:
            # MinIO access key and secret key
            - name: MINIO_ACCESS_KEY
              value: {{.s3.access_key}}
            - name: MINIO_SECRET_KEY
              value: {{.s3.secret_key}}
          ports:
            - containerPort: 9000
          # Readiness probe detects situations when MinIO server instance
          # is not ready to accept traffic. Kubernetes doesn't forward
          # traffic to the pod while readiness checks fail.
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 120
            periodSeconds: 20
          # Liveness probe detects situations where MinIO server instance
          # is not working properly and needs restart. Kubernetes automatically
          # restarts the pods if liveness checks fail.
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 120
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: minio
spec:
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    # Looks for labels `app:minio` in the namespace and applies the spec
    app: minio

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: minio
  namespace: minio
  annotations:
    nginx.ingress.kubernetes.io/auth-url: "https://oauth2.{{.domain}}/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://oauth2.{{.domain}}/oauth2/start?rd=https%3A%2F%2F$host$request_uri"
spec:
  tls:
    - hosts:
        - minio.{{.domain}}
  rules:
    - host: minio.{{.domain}}
      http:
        paths:
          - backend:
              serviceName: minio
              servicePort: 9000
